// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PurchaseStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum TemplateCategory {
  STARTUP
  OPEN_SOURCE
  API
  MOBILE
  WEB
  DATA_SCIENCE
  GENERAL
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  documents Document[]
  purchases Purchase[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Template {
  id          String           @id @default(cuid())
  name        String
  description String
  category    TemplateCategory
  price       Int // Prix en centimes
  content     String           @db.Text // Template Markdown
  htmlPreview String           @db.Text // Preview HTML
  thumbnail   String? // URL vers image de preview
  isPremium   Boolean          @default(true)
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  purchases Purchase[]

  @@map("templates")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text // Contenu Markdown
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Purchase {
  id         String         @id @default(cuid())
  userId     String
  templateId String
  status     PurchaseStatus @default(PENDING)
  amount     Int // Prix payé en centimes
  
  // Revolut payment data
  revolutOrderId String? @unique
  paymentLink    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId]) // Un user ne peut acheter qu'une fois le même template
  @@map("purchases")
}